# 浅拷贝：copy.copy，浅拷贝是对于一个对象的顶层拷贝
# 只拷贝了引用，并没有拷贝内容，只是将内存地址指向了被复制的对象，两个对象指向的内存地址相同
# 列表浅拷贝，列表内的对象可修改，因此只拷贝了列表中每个元素指向的内存的地址
# 字典浅拷贝，也是拷贝的每个键每个值的地址引用

# 深拷贝：copy.deepcopy 深拷贝是对于一个对象所有层次的拷贝(递归)
# 深拷贝后，指向了一个新的内存地址，表面内容一样，其实地址已经变化
# 列表深拷贝,里面每个元素的地址也都变了


# 注意：元组是不可修改对象，如果元组里面元素也是不可修改对象，使用浅拷贝和深拷贝，都只是复制引用，类似于赋值
# 注意：但是，元组里面的对象是可修改对象，比如列表，字典，则深拷贝则是深拷贝，地址会发生变化，浅拷贝还是复制引用

# 应用：如果想对数据进行修改，不破坏原始数据，就用深拷贝，完全复制一份出来，与原数据无关


# 1. 赋值语句：类似浅拷贝，只是复制了地址引用
a = [11, 22]
b = a
# 可以使用id函数查看内存地址
a.append(33)
b.append(44)

# 修改a和b，a和b同时变化了，因为他们两个指向的是同一个内存地址（同一个存储空间）
print(a)
print(b)
print(id(a))
print(id(b))
# 输出结果显示，a和b地址一样，并且a变化后，b也变化，因为b的地址指向的a

# 2. copy.deepcopy：深拷贝
import copy
c = copy.deepcopy(a)
a.append(44)
print()
print(a)
print(c)
print(id(a))
print(id(c))
# 输出结果显示，a和c地址不一样，并且a变化后，c没有变化，c是一个新变量，与a已无联系

